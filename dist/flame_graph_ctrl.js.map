{"version":3,"sources":["../src/flame_graph_ctrl.js"],"names":["MetricsPanelCtrl","TimeSeries","kbn","config","_","$","d3","sample","sample2","panelDefaults","mapping","signatureFieldName","signatureSeparator","panelMargin","left","right","top","bottom","panelWidth","panelHeight","availableColorFunctions","colorFunction","colorModuleColumnName","colorSingle","FlameGraphCtrl","$scope","$injector","defaultsDeep","panel","events","on","onInitEditMode","bind","onDataReceived","onDataError","panels","grafanaBootData","settings","thisPanel","pluginId","thisPanelPath","baseUrl","editorPath","addEditorTab","err","dataList","data","map","tableHandler","length","tree","setValues","panelTitleOffset","title","render","viewPortWidth","Math","max","document","documentElement","clientWidth","window","innerWidth","pixelsPerSpan","round","span","tmpPanelHeight","height","row","replace","parseInt","columnName","i","columns","text","signature","value","currentPart","shift","children","name","setValueRec","push","Object","keys","reduce","acc","current","split","tableData","columnIdSignature","getColumnId","columnIdValue","console","error","Error","message","rows","JSON","stringify","log","colorFunctions","colorFunction_random","colorFunction_single","colorFunction_module","colorFunction_scale","scope","elem","attrs","ctrl","find","width","flameGraph","cellHeight","transitionDuration","transitionEase","easeCubic","sort","select","datum","call","setTimeout","resetZoom","renderingCompleted","templateUrl"],"mappings":"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","file":"flame_graph_ctrl.js","sourcesContent":["\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\n\n\nimport TimeSeries from 'app/core/time_series2';\nimport kbn from 'app/core/utils/kbn';\nimport config from 'app/core/config';\n\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport * as d3 from './d3_bundle';\n\nimport sample from './sample';\nimport sample2 from './sample2';\n\nimport './external/d3.flameGraph.css!';\nimport './css/flame-graph-panel.css!';\n\nconst panelDefaults = {\n  mapping: {\n    signatureFieldName: 'signature',\n    signatureSeparator: '#',\n  },\n\n  panelMargin: {\n    left: 35,\n    right: 35,\n    top: 10,\n    bottom: 20\n  },\n\n  panelWidth: null,\n  panelHeight: 500,\n\n  // fixed: fixed color\n  // module: based on a column name\n  // random: hashColor() function from d3.flameGraph lib\n  // scale depending of the height\n  availableColorFunctions: ['random', 'fixed', 'module', 'scale'],\n  colorFunction: 'random',\n  colorModuleColumnName: 'module',\n  colorSingle: '#C05018',\n};\n\nclass FlameGraphCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n    _.defaultsDeep(this.panel, panelDefaults);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n\n    this.panelWidth = null;\n    this.panelHeight = null;\n  }\n\n  onInitEditMode() {\n    // determine the path to this plugin\n    var panels = grafanaBootData.settings.panels;\n    var thisPanel = panels[this.pluginId];\n    var thisPanelPath = thisPanel.baseUrl + '/';\n    // add the relative path to the editor\n    var editorPath = thisPanelPath + 'editor.html';\n\n    this.addEditorTab('Options', editorPath, 2);\n  }\n\n  onDataError(err) {\n    this.onDataReceived([]);\n  }\n\n  onDataReceived(dataList) {\n    const data = dataList.map(this.tableHandler.bind(this));\n    if (!data || data.length === 0) {\n      // const error = new Error();\n      // error.message = 'No data or malformed series';\n      // error.data = 'FlameGraph Panel expects at least 1 serie with signature column.\\n\\nResponse:\\n' + JSON.stringify(data);\n      // throw error;\n      return;\n    }\n\n    this.tree = this.setValues(data[0]);\n    \n    let panelTitleOffset = 0;\n    if (this.panel.title !== \"\")\n      panelTitleOffset = 25;\n\n    // we do not set width & height here\n    // as it is only available within the callback of render\n    // when all other angular components are ready\n    this.render();\n  }\n\n  getPanelWidthBySpan() {\n    const viewPortWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    // get the pixels of a span\n    const pixelsPerSpan = viewPortWidth / 12;\n    // multiply num spans by pixelsPerSpan\n    return Math.round(this.panel.span * pixelsPerSpan) - this.panel.panelMargin.left - this.panel.panelMargin.right;\n  }\n\n  getPanelHeight() {\n    // panel can have a fixed height via options\n    let tmpPanelHeight = this.panel.height;\n    // if that is blank, try to get it from our row\n    if (typeof tmpPanelHeight === 'undefined') {\n      // get from the row instead\n      tmpPanelHeight = this.row.height;\n      // default to 250px if that was undefined also\n      if (typeof tmpPanelHeight === 'undefined') {\n        tmpPanelHeight = 250;\n      }\n    }\n    else {\n      // convert to numeric value\n      tmpPanelHeight = tmpPanelHeight.replace(\"px\",\"\");\n    }\n    return parseInt(tmpPanelHeight) - this.panel.panelMargin.top - this.panel.panelMargin.bottom;\n  }\n\n  getColumnId(data, columnName) {\n    for (let i = 0; i < data.columns.length; i++) {\n      if (data.columns[i].text === columnName)\n        return i;\n    }\n    return null;\n  }\n\n  setValueRec(tree, signature, value) {\n    // `signature` is the current node\n    if (signature.length == 0) {\n      tree.value = value;\n      return tree;      \n    }\n\n    const currentPart = signature[0];\n    signature.shift();\n\n    // already existing children\n    for (let i = 0; i < tree.children.length; i++) {\n      if (tree.children[i].name === currentPart)\n        return this.setValueRec(tree.children[i], signature, value);\n    }\n\n    // new children\n    tree.children.push(this.setValueRec({name: currentPart, value: value, children: []}, signature, value));\n    return tree;\n  }\n\n  setValues(data) {\n    return Object.keys(data).reduce(((acc, current) => {\n      // in case of data based on time (round)\n      if (data[current] == 0)\n        data[current] = 1;\n      this.setValueRec(\n        acc,\n        current.split(this.panel.mapping.signatureSeparator),\n        data[current]\n        // data[current] == 0 ? 1 : data[current]\n      );\n      return acc;\n    }).bind(this), {name: 'root', value: 1, children: []});\n  }\n\n  tableHandler(tableData) {\n    const columnIdSignature = this.getColumnId(tableData, this.panel.mapping.signatureFieldName);\n    const columnIdValue = this.getColumnId(tableData, 'Value');\n    \n    if (columnIdSignature == null) {\n      console.error('columns:', tableData.columns);\n      console.error('signature column name:', this.panel.mapping.signatureFieldName);\n      const error = new Error();\n      error.message = 'No data or malformed series';\n      error.data = 'Metric query returns ' + tableData.rows.length +\n        ' series. FlameGraph Panel expects at least 1 serie with signature column.\\n\\nResponse:\\n'+JSON.stringify(tableData);\n      throw error;\n    }\n    \n    if (columnIdValue == null) {\n      console.log('this should not happen');\n    }\n\n\n    return tableData.rows.reduce((acc, current) => {\n      const signature = current[columnIdSignature];\n      if (acc[signature] == null)\n        acc[signature] = current[columnIdValue];\n      else\n        acc[signature] += current[columnIdValue];\n      // DEBUG\n      // acc[signature] = 1;\n      return acc;\n    }, {});\n  }\n\n  colorFunction_random() {\n  }\n  colorFunction_single() {\n  }\n  colorFunction_module() {\n  }\n  colorFunction_scale() {\n  }\n\n  setFrameColor() {\n    const colorFunctions = {\n      'random': colorFunction_random,\n      'single': colorFunction_single,\n      'module': colorFunction_module,\n      'scale': colorFunction_scale,\n    };\n    if (colorFunctions[this.colorFunction])\n      colorFunctions[this.colorFunction]();\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    elem = elem.find('.flame-graph-panel');\n    \n    function render() {\n      if (!ctrl.tree) {\n        return;\n      }\n      // console.log(JSON.stringify(ctrl.tree));\n\n      // ctrl.tree = sample2;\n\n      // console.info(ctrl.tree);\n      // ctrl.panel.height = 900;\n      ctrl.panelWidth = elem.width();\n      \n      const flameGraph = d3.flameGraph(d3)\n        .width(ctrl.panelWidth)\n        .cellHeight(18)\n        .transitionDuration(750)\n        .transitionEase(d3.easeCubic)\n        .sort(true)\n        .title(\"\");\n\n      d3.select(\"#chart\")\n        .datum(ctrl.tree)\n        .call(flameGraph);\n\n      setTimeout(function () {\n        flameGraph.resetZoom();\n      }, 5000);\n    }\n\n    this.events.on('render', () => {\n      render();\n      ctrl.renderingCompleted();\n    });\n\n  }\n}\n\nFlameGraphCtrl.templateUrl = 'module.html';\n\nexport {\n\tFlameGraphCtrl,\n\tFlameGraphCtrl as MetricsPanelCtrl\n};\n"]}